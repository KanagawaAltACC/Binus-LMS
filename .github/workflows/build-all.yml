name: Build All Platforms with Code Signing

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write  # Required for Sigstore signing

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        working-directory: Sources
        run: npm install

      - name: Build Windows App
        working-directory: Sources
        run: npm run dist:win

      # Sign Windows executables using Sigstore (free code signing)
      - name: Install Sigstore CLI
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-windows-amd64.exe
          mv cosign-windows-amd64.exe cosign.exe

      - name: Sign Windows Executable with Sigstore
        run: |
          # Sign each .exe file
          for file in Sources/dist/*.exe; do
            if [ -f "$file" ]; then
              echo "Signing $file with Sigstore..."
              ./cosign.exe sign-blob --yes "$file" --output-signature "${file}.sig" --output-certificate "${file}.crt"
              echo "✓ Signed $file"
            fi
          done
        shell: bash

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BinusLMS-Windows
          path: |
            Sources/dist/*.exe
            Sources/dist/*.sig
            Sources/dist/*.crt
          compression-level: 6

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        working-directory: Sources
        run: npm install

      - name: Build Linux App
        working-directory: Sources
        run: npm run dist

      # Sign Linux binaries using Sigstore
      - name: Install Sigstore CLI
        uses: sigstore/cosign-installer@v3

      - name: Sign Linux Binaries with Sigstore
        run: |
          # Sign AppImage files
          for file in Sources/dist/*.AppImage; do
            if [ -f "$file" ]; then
              echo "Signing $file with Sigstore..."
              cosign sign-blob --yes "$file" --output-signature "${file}.sig" --output-certificate "${file}.crt"
              echo "✓ Signed $file"
            fi
          done
          
          # Sign .deb files
          for file in Sources/dist/*.deb; do
            if [ -f "$file" ]; then
              echo "Signing $file with Sigstore..."
              cosign sign-blob --yes "$file" --output-signature "${file}.sig" --output-certificate "${file}.crt"
              echo "✓ Signed $file"
            fi
          done

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BinusLMS-Linux
          path: |
            Sources/dist/*.AppImage
            Sources/dist/*.deb
            Sources/dist/*.sig
            Sources/dist/*.crt
          compression-level: 6

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        working-directory: Sources
        run: npm install

      - name: Build macOS App
        working-directory: Sources
        run: npm run dist:mac

      # Sign macOS application using Sigstore
      - name: Install Sigstore CLI
        uses: sigstore/cosign-installer@v3

      - name: Sign macOS Application with Sigstore
        run: |
          # Sign .dmg files
          for file in Sources/dist/*.dmg; do
            if [ -f "$file" ]; then
              echo "Signing $file with Sigstore..."
              cosign sign-blob --yes "$file" --output-signature "${file}.sig" --output-certificate "${file}.crt"
              echo "✓ Signed $file"
            fi
          done

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BinusLMS-macOS
          path: |
            Sources/dist/*.dmg
            Sources/dist/*.sig
            Sources/dist/*.crt
          compression-level: 6

  merge-artifacts:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: BinusLMS-Windows
          path: combined-build/windows

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: BinusLMS-Linux
          path: combined-build/linux

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: BinusLMS-macOS
          path: combined-build/macos

      # Install Sigstore for verification
      - name: Install Sigstore CLI
        uses: sigstore/cosign-installer@v3

      # Verify all signatures
      - name: Verify Signatures
        run: |
          echo "Verifying Windows signatures..."
          for file in combined-build/windows/*.exe; do
            if [ -f "$file" ] && [ -f "${file}.sig" ] && [ -f "${file}.crt" ]; then
              if cosign verify-blob --signature "${file}.sig" --certificate "${file}.crt" --certificate-identity-regexp ".*" --certificate-oidc-issuer-regexp ".*" "$file"; then
                echo "✓ $file signature verified"
              else
                echo "✗ $file signature failed"
                exit 1
              fi
            fi
          done
          
          echo "Verifying Linux signatures..."
          for file in combined-build/linux/*.AppImage combined-build/linux/*.deb; do
            if [ -f "$file" ] && [ -f "${file}.sig" ] && [ -f "${file}.crt" ]; then
              if cosign verify-blob --signature "${file}.sig" --certificate "${file}.crt" --certificate-identity-regexp ".*" --certificate-oidc-issuer-regexp ".*" "$file"; then
                echo "✓ $file signature verified"
              else
                echo "✗ $file signature failed"
                exit 1
              fi
            fi
          done
          
          echo "Verifying macOS signatures..."
          for file in combined-build/macos/*.dmg; do
            if [ -f "$file" ] && [ -f "${file}.sig" ] && [ -f "${file}.crt" ]; then
              if cosign verify-blob --signature "${file}.sig" --certificate "${file}.crt" --certificate-identity-regexp ".*" --certificate-oidc-issuer-regexp ".*" "$file"; then
                echo "✓ $file signature verified"
              else
                echo "✗ $file signature failed"
                exit 1
              fi
            fi
          done

      # Create attestations for supply chain security
      - name: Create Attestations
        run: |
          echo "Creating attestations..."
          for file in combined-build/windows/*.exe combined-build/linux/*.AppImage combined-build/linux/*.deb combined-build/macos/*.dmg; do
            if [ -f "$file" ]; then
              echo "Creating attestation for $file..."
              cosign attest --yes --predicate <(echo '{"buildType":"github-actions","workflow":"build-all-platforms"}') "$file"
            fi
          done

      - name: Upload Combined Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BinusLMS-AllPlatforms-Signed
          path: combined-build/
          compression-level: 6

      # Create release with signed artifacts
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            combined-build/windows/*.exe
            combined-build/windows/*.sig
            combined-build/windows/*.crt
            combined-build/linux/*.AppImage
            combined-build/linux/*.deb
            combined-build/linux/*.sig
            combined-build/linux/*.crt
            combined-build/macos/*.dmg
            combined-build/macos/*.sig
            combined-build/macos/*.crt
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🔐 Code Signing Information
            
            All binaries in this release are signed using Sigstore, a free and open-source code signing service.
            
            ### Verification Instructions
            
            To verify the signatures:
            
            1. Install cosign: `go install github.com/sigstore/cosign/v2/cmd/cosign@latest`
            2. Verify a binary: `cosign verify-blob --signature <file>.sig --certificate <file>.crt --certificate-identity-regexp ".*" --certificate-oidc-issuer-regexp ".*" <file>`
            
            ### Files
            - `.exe/.AppImage/.deb/.dmg` - The actual application binaries
            - `.sig` - Sigstore signature files
            - `.crt` - Certificate files for verification
            
            All signatures are timestamped and can be verified independently.